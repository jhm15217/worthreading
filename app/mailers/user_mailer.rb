require 'wr_logs_helper'

class UserMailer < ActionMailer::Base
  PROD_URL = "www.worth-reading.org"
  DEV_URL = "localhost:3000"
  PROTOCOL = 'http'

  default from: "notifications@worth-reading.org"

  # Constants
  AUTOGEN_MSG = "This is an autogenerated email from worth-reading.org. 
                 There is no need to reply to this email."
  def welcome_email(user)
    @user = user

    @url =  confirm_email_url(host: if Rails.env.production?
                                      PROD_URL
                                    else
                                      DEV_URL
                                    end,
                               id: user.id, 
                               confirmation_token: user.confirmation_token,
                               protocol: "http" )
    mail(to: user.email, subject: "Welcome to Worth Reading")
  end

  # Check if email taken
  def confirm_email_change(user, new_email)
    @user = user
    @new_email = new_email
    @autogen_msg = AUTOGEN_MSG

    @change_email_url = confirm_email_change_user_url(id: @user.id,
                                    confirmation_token: @user.confirmation_token,
                                    new_email: new_email,
                                    host: Rails.env.production? ? PROD_URL : DEV_URL,
                                    protocol: "http")
    mail(to: @new_email, subject: "Confirm Change in Email Address")
  end

  def alert_change_in_wr_log(wr_log)
    @wr_log = wr_log
    @email = Email.find(@wr_log.email_id)
    @sender = User.find_by_id(@wr_log.sender_id)
    @recipient = User.find_by_id(@wr_log.receiver_id)
    @autogen_msg = AUTOGEN_MSG

   if @sender[:email_notify]
      case @wr_log.action
      when "worth reading"
        @alert = "liked your email"
      when "opened"
        @alert = "opened your email"
      else
        raise "Invalid action"
      end

      mail(to: @sender.email, subject: "#{@recipient.email}, #{@alert}: #{@email.subject}")
    end
  end

  # General method for sending user-to-user email
  def show(log, part, see_more_url, signature, body, worth_img_url, worth_reading_url, whats_this_url, unsubscribe_url, beacon_url)
    @part = part
    @body = body
    @see_more_url = see_more_url
    @worth_img_url = worth_img_url
    @worth_reading_url = worth_reading_url
    @whats_this_url = whats_this_url
    @unsubscribe_url = unsubscribe_url
    @signature = signature
    @beacon_url = beacon_url
    t = mail(to: User.find(log.receiver_id).name, from: User.find(log.sender_id).name, subject: Email.find(log.email_id).subject, body: body)
    puts t.inspect
    t
  end

  def error_email(error, user, email)
    @sender = user
    @error = error
    @email = email
    @autogen_msg = AUTOGEN_MSG
    @signin_url = signin_url(protocol: "http", host: Rails.env.production? ? PROD_URL : DEV_URL)

    mail(to: @sender.email, subject: "Error: #@error")
  end

  def password_reset(user)
    @user = user
    @autogen_msg = AUTOGEN_MSG

    @url =  reset_password_url(host: if Rails.env.production?
                               PROD_URL
    else
      DEV_URL
    end,
      id: user.id, 
      confirmation_token: user.confirmation_token,
      protocol: if Rails.env.production?
                  'https'
      else
        'http'
      end)
      mail(to: user.email, subject: "Request for Password Reset")
  end

end
